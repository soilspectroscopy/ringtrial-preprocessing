
library("tidyverse")
library("tidymodels")
library("lubridate")
library("prospectr")
library("cowplot")
library("qs")

# Mounted disk for storing big files
mnt.dir <- "~/projects/mnt-ringtrial/"
dir.preprocessed <- paste0(mnt.dir, "preprocessed/")

## Loading data for reference
spec.data <- read_csv(paste0(dir.preprocessed, "RT_STD_allMIRspectra_SNV.csv"))

spec.data %>%
  group_by(organization) %>%
  summarise(count = n())

####################################
##### Kennard-Stone subsetting #####
####################################

spec.data.kssl <- spec.data %>%
  filter(organization == "KSSL") %>%
  select(-organization, -sample_id) %>%
  as.matrix()

set.seed(1993)
kenStone.selection <- kenStone(X = spec.data.kssl, k = 50,
                               metric = "mahal", pc = 0.9999,
                               .center = T, .scale = T)

plot(kenStone.selection$pc[, 1:2], xlab = "PC1", ylab = "PC2")
points(kenStone.selection$pc[kenStone.selection$model, 1:2], pch = 19, col = 2)

selected.rows <- kenStone.selection$model

sample.ids <- spec.data %>%
  distinct(sample_id) %>%
  pull(sample_id)

sst.ids <- sample.ids[selected.rows]
sort(sst.ids)

test.ids <- sample.ids[-selected.rows]
sort(test.ids)

qsave(sst.ids, "outputs/sst_subsets/RT_sst_ids.qs")
qsave(test.ids, "outputs/sst_subsets/RT_test_ids.qs")

## Checking PC distribution of RT SST and test onto KSSL PC space

## PCA projection

kssl.library <- read_csv(paste0(dir.preprocessed, "KSSL_soilMIRspectra_SNV.csv"))
head(kssl.library[,1:10])

spectra.range <- as.character(seq(660, 3990, by = 2))

kssl.library <- kssl.library %>%
  select(sample_id, all_of(spectra.range)) %>%
  mutate(subset = "KSSL_library", .before = 1)

head(kssl.library[,1:10])

kssl.ringtrial <- spec.data %>%
  filter(organization == "KSSL")

kssl.ringtrial.sst <- kssl.ringtrial %>%
  filter(sample_id %in% sst.ids) %>%
  select(-organization) %>%
  mutate(subset = "RT_SST", .before = 1)

kssl.ringtrial.test <- kssl.ringtrial %>%
  filter(!(sample_id %in% sst.ids)) %>%
  select(-organization) %>%
  mutate(subset = "RT_test", .before = 1)

# Reference PC space

pca.model <- kssl.library %>%
  recipe() %>%
  update_role(everything()) %>%
  update_role(all_of(c("sample_id", "subset")), new_role = "id") %>%
  step_normalize(all_predictors(), id = "normalization") %>% # Center and scale spectra
  step_pca(all_predictors(), num_comp = 4, id = "pca") %>% # 4 comps just for visualization purpose
  prep()

pca.scores.train <- juice(pca.model) %>%
  rename_at(vars(starts_with("PC")), ~paste0("PC", as.numeric(gsub("PC", "", .))))

p.scores <- pca.scores.train %>%
  ggplot(aes(x = PC1, y = PC2)) +
  geom_point(aes(color = "KSSL library"), size = 0.5, alpha = 0.25, color = "black") +
  labs(x = "PC1", y = "PC2", color = "",
       title = "KSSL library") +
  theme_light() +
  theme(legend.position = "bottom"); p.scores

# Projection of RT SST and test

pca.scores.sst <- bake(pca.model, new_data = kssl.ringtrial.sst) %>%
  rename_at(vars(starts_with("PC")), ~paste0("PC", as.numeric(gsub("PC", "", .)))) %>%
  select(-sample_id, -subset) %>%
  bind_cols({kssl.ringtrial.sst %>%
      select(sample_id, subset)}, .)

p.scores.sst <- p.scores +
  geom_point(data = pca.scores.sst,
             aes(x = PC1, y = PC2, color = "RT_SST"),
             size = 1, alpha = 1) +
  scale_color_manual(values = c("KSSL library"="black", "RT_SST" = "red")) +
  labs(title = "Projection of RT SST samples - SNV preprocessed"); p.scores.sst

pca.scores.test <- bake(pca.model, new_data = kssl.ringtrial.test) %>%
  rename_at(vars(starts_with("PC")), ~paste0("PC", as.numeric(gsub("PC", "", .)))) %>%
  select(-sample_id, -subset) %>%
  bind_cols({kssl.ringtrial.test %>%
      select(sample_id, subset)}, .)

p.scores.test <- p.scores +
  geom_point(data = pca.scores.test,
             aes(x = PC1, y = PC2, color = "RT_test"),
             size = 1, alpha = 1) +
  scale_color_manual(values = c("KSSL library"="black", "RT_test" = "green")) +
  labs(title = "Projection of RT test samples - SNV preprocessed"); p.scores.test

# Full plot

pca.variance <- tidy(pca.model, id = "pca", type = "variance")

pca.variance %>%
  distinct(terms)

pca.percents <- pca.variance %>%
  filter(terms == "percent variance") %>%
  filter(component <= 2) %>%
  mutate(value = round(value, 2))

p.scores.all <- p.scores +
  geom_point(data = pca.scores.sst,
             aes(x = PC1, y = PC2, color = "RT SST (n=50)"),
             size = 1, alpha = 1) +
  geom_point(data = pca.scores.test,
             aes(x = PC1, y = PC2, color = "RT test (n=20)"),
             size = 1, alpha = 1) +
  scale_color_manual(values = c("KSSL library"="black", "RT SST (n=50)"="red", "RT test (n=20)" = "green")) +
  # labs(title = "Projection of ring trial subsets",
  labs(title = "",
       x = paste0("PC1 (", pca.percents[[1, "value"]], "%)"),
       y = paste0("PC2 (", pca.percents[[2, "value"]], "%)")); p.scores.all

ggsave("outputs/sst_subsets/plot_pca_projection_RT_SSTandTest_onto_KSSLlibrary.png",
       p.scores.all, dpi = 300, width = 8, height = 6,
       units = "in", scale = 1)


########################################
##### Soil Properties distribution #####
########################################

kssl.library.soil <- read_csv(paste0(dir.preprocessed, "KSSL_soilMIRspectra_SNV.csv"),
                              col_select = 1:10)
head(kssl.library.soil)

rt.wetchem <- read_csv(paste0(dir.preprocessed, "RT_wetchem_soildata.csv"))
rt.wetchem

sst.ids <- qread("outputs/sst_subsets/RT_sst_ids.qs")
test.ids <- qread("outputs/sst_subsets/RT_test_ids.qs")

# Panel carbon_org_perc

data.carbon_org_perc <- kssl.library.soil %>%
  mutate(sample_id = as.character(sample_id)) %>%
  select(sample_id, carbon_org_perc) %>%
  filter(!is.na(carbon_org_perc)) %>%
  mutate(subset = "KSSL library") %>%
  bind_rows({
    rt.wetchem %>%
      select(sample_id, carbon_org_perc) %>%
      mutate(subset = ifelse(sample_id %in% sst.ids, "RT SST", "RT test"))
  }, .)

# data.carbon_org_perc %>%
#   mutate(carbon_org_perc = ifelse(carbon_org_perc <= 0, 0.01, carbon_org_perc)) %>%
#   mutate(carbon_org_perc = log(carbon_org_perc)) %>%
#   ggplot(aes(x = carbon_org_perc, fill = subset, color = subset)) +
#   geom_density(alpha = 0.15) +
#   labs(y = "Density", x = "", fill = "", color = "") +
#   theme_light()

p.carbon_org_perc <- data.carbon_org_perc %>%
  mutate(carbon_org_perc = ifelse(carbon_org_perc <= 0, 0.01, carbon_org_perc)) %>%
  mutate(carbon_org_perc = log(carbon_org_perc)) %>%
  ggplot(aes(x = carbon_org_perc, fill = subset, color = subset)) +
  geom_density(alpha = 0.15, show.legend = F) +
  labs(y = "", x = expression(OC~('%')), fill = "", color = "") +
  scale_x_continuous(breaks = c(-5, -2.5, 0, 2.5), labels = round(exp(c(-5, -2.5, 0, 2.5)), 2)) +
  # scale_fill_manual(values = c("darkred", "darkblue")) +
  # scale_color_manual(values = c("darkred", "darkblue")) +
  annotate("text", label = "A)", x = -5.25, y = 0.50, size = 4, colour = "black") +
  theme_light() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# Panel clay_perc

data.clay_perc <- kssl.library.soil %>%
  mutate(sample_id = as.character(sample_id)) %>%
  select(sample_id, clay_perc) %>%
  filter(!is.na(clay_perc)) %>%
  mutate(subset = "KSSL library") %>%
  bind_rows({
    rt.wetchem %>%
      select(sample_id, clay_perc) %>%
      mutate(subset = ifelse(sample_id %in% sst.ids, "RT SST", "RT test"))
  }, .)

# data.clay_perc %>%
#   mutate(clay_perc = ifelse(clay_perc <= 0, 0.01, clay_perc)) %>%
#   ggplot(aes(x = clay_perc, fill = subset, color = subset)) +
#   geom_density(alpha = 0.15) +
#   labs(y = "Density", x = "", fill = "", color = "") +
#   theme_light()

p.clay_perc <- data.clay_perc %>%
  mutate(clay_perc = ifelse(clay_perc <= 0, 0.01, clay_perc)) %>%
  ggplot(aes(x = clay_perc, fill = subset, color = subset)) +
  geom_density(alpha = 0.15, show.legend = T) +
  labs(y = "", x = expression(Clay~('%')), fill = "", color = "") +
  # scale_fill_manual(values = c("darkred", "darkblue")) +
  # scale_color_manual(values = c("darkred", "darkblue")) +
  annotate("text", label = "B)", x = 0, y = 0.06, size = 4, colour = "black") +
  theme_light() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = c(0.75, 0.75))

# Panel pH_H2O

data.pH_H2O <- kssl.library.soil %>%
  mutate(sample_id = as.character(sample_id)) %>%
  rename(pH_H2O = pH_H20) %>%
  select(sample_id, pH_H2O) %>%
  filter(!is.na(pH_H2O)) %>%
  mutate(subset = "KSSL library") %>%
  bind_rows({
    rt.wetchem %>%
      rename(pH_H2O = pH_H20) %>%
      select(sample_id, pH_H2O) %>%
      mutate(subset = ifelse(sample_id %in% sst.ids, "RT SST", "RT test"))
  }, .)

# data.pH_H2O %>%
#   mutate(pH_H2O = ifelse(pH_H2O <= 0, 0.01, pH_H2O)) %>%
#   ggplot(aes(x = pH_H2O, fill = subset, color = subset)) +
#   geom_density(alpha = 0.15) +
#   labs(y = "Density", x = "", fill = "", color = "") +
#   theme_light()

p.pH_H2O <- data.pH_H2O %>%
  mutate(pH_H2O = ifelse(pH_H2O <= 0, 0.01, pH_H2O)) %>%
  ggplot(aes(x = pH_H2O, fill = subset, color = subset)) +
  geom_density(alpha = 0.15, show.legend = F) +
  labs(y = "", x = expression(pH~(H[2]*O)), fill = "", color = "") +
  # scale_fill_manual(values = c("darkred", "darkblue")) +
  # scale_color_manual(values = c("darkred", "darkblue")) +
  annotate("text", label = "C)", x = 2, y = 0.50, size = 4, colour = "black") +
  theme_light() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# Panel potassium_cmolkg

data.potassium_cmolkg <- kssl.library.soil %>%
  mutate(sample_id = as.character(sample_id)) %>%
  select(sample_id, potassium_cmolkg) %>%
  filter(!is.na(potassium_cmolkg)) %>%
  mutate(subset = "KSSL library") %>%
  bind_rows({
    rt.wetchem %>%
      select(sample_id, potassium_cmolkg) %>%
      mutate(subset = ifelse(sample_id %in% sst.ids, "RT SST", "RT test"))
  }, .)

# data.potassium_cmolkg %>%
#   mutate(potassium_cmolkg = ifelse(potassium_cmolkg <= 0, 0.01, potassium_cmolkg)) %>%
#   mutate(potassium_cmolkg = log(potassium_cmolkg)) %>%
#   ggplot(aes(x = potassium_cmolkg, fill = subset, color = subset)) +
#   geom_density(alpha = 0.15) +
#   labs(y = "Density", x = "", fill = "", color = "") +
#   theme_light()

p.potassium_cmolkg <- data.potassium_cmolkg %>%
  mutate(potassium_cmolkg = ifelse(potassium_cmolkg <= 0, 0.01, potassium_cmolkg)) %>%
  mutate(potassium_cmolkg = log(potassium_cmolkg)) %>%
  ggplot(aes(x = potassium_cmolkg, fill = subset, color = subset)) +
  geom_density(alpha = 0.15, show.legend = F) +
  labs(y = "", x = expression(K~(cmol[c]~kg^-1)), fill = "", color = "") +
  scale_x_continuous(breaks = c(-4, -2, 0, 2), labels = round(exp(c(-4, -2, 0, 2)), 2)) +
  # scale_fill_manual(values = c("darkred", "darkblue")) +
  # scale_color_manual(values = c("darkred", "darkblue")) +
  annotate("text", label = "D)", x = -5.5, y = 0.90, size = 4, colour = "black") +
  theme_light() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# Panel combination

p.final.ver <- plot_grid(p.carbon_org_perc, p.clay_perc, p.pH_H2O, p.potassium_cmolkg,
                         labels = c('', '', '', ''),
                         ncol = 2, align = 'v', axis = 'l')

ggsave("outputs/sst_subsets/plot_soil_properties_distribution.png", p.final.ver, dpi = 300,
       width = 8, height = 6, units = "in", scale = 1)


###################################################
##### Spectral Subspace Transformation - SST #####
###################################################

# Spectral subset

spectral.subset <- spec.data %>%
  mutate(ct_subset = ifelse(sample_id %in% sst.ids, "SST", "test")) %>%
  relocate(ct_subset, .after = sample_id)

spectral.subset

# Spectral Subspace Transformation - SST

testset.kssl <- spectral.subset %>%
  filter(organization == "KSSL") %>%
  filter(ct_subset == "test")

testsets.ct <- spectral.subset %>%
  filter(!(organization == "KSSL")) %>%
  filter(ct_subset == "test")

ct.orgs <- testsets.ct %>%
  distinct(organization) %>%
  pull(organization)

ct.list <- list()

for(k in 1:length(ct.orgs)) {
  
  korganization <- ct.orgs[k]
  
  primary <- spectral.subset %>%
    filter(organization == "KSSL") %>%
    filter(ct_subset == "SST") %>%
    arrange(sample_id)
  
  secondary <- spectral.subset %>%
    filter(organization == korganization) %>%
    filter(ct_subset == "SST") %>%
    arrange(sample_id)
  
  testset <- testsets.ct %>%
    filter(organization == korganization) %>%
    filter(ct_subset == "test")
  
  ## SST
  
  id.vars <- c("organization", "sample_id", "ct_subset")
  cumvar <- 0.9999
  
  xtest <- testset %>%
    select(-all_of(id.vars)) %>%
    as.matrix()
  
  spec1 <- primary %>%
    select(-all_of(id.vars)) %>%
    as.matrix()
  
  spec2 <- secondary %>%
    select(-all_of(id.vars)) %>%
    as.matrix()
  
  xcomb <- cbind(spec1, spec2)
  xcomb.svd <- svd(xcomb)
  
  d <- xcomb.svd$d
  cumvar.xcomb <- cumsum(d^2)/sum(d^2)
  ncomps <- sum(cumvar.xcomb <= cumvar)
  
  P1T <- t(xcomb.svd$v[seq(1,ncol(spec1),1),1:ncomps])
  
  P2T <- t(xcomb.svd$v[seq(ncol(spec1)+1,ncol(t(xcomb.svd$v)),1),1:ncomps])
  
  stdmat <- diag(ncol(spec1)) + MASS::ginv(P2T) %*% (P1T - P2T)
  
  xtrans <- xtest %*% stdmat
  xtrans <- as_tibble(as.data.frame(xtrans))
  names(xtrans) <- colnames(xtest)
  
  test.trans <- bind_cols({testset %>%
      select(all_of(id.vars))}, xtrans)
  
  # comparison <- bind_rows({testset %>% mutate(ct_subset = "original")}, test.trans)
  # 
  # test.id <- "RT_12"
  # 
  # comparison %>%
  #   filter(sample_id == test.id) %>%
  #   pivot_longer(-all_of(id.vars), names_to = "wavenumber", values_to = "absorbance") %>%
  #   ggplot(aes(x = as.numeric(wavenumber), y = absorbance)) +
  #   labs(x = bquote("Wavenumber"~cm^-1), y = "Absorbance", color = "") +
  #   scale_x_continuous(breaks = c(600, 1200, 1800, 2400, 3000, 3600, 4000)) +
  #   geom_line(aes(color = ct_subset, group = ct_subset)) +
  #   theme_light() + theme(legend.position = "bottom")
  
  ct.list[[k]] <- test.trans
  
  cat(paste0("Run ", k, "/", length(ct.orgs), "\n"))
  
}

spectral.sst <- Reduce(bind_rows, ct.list) %>%
  mutate(ct_subset = ifelse(ct_subset == "test", "afterSST", NA))

before.sst <- spectral.subset %>%
  filter(ct_subset == "test") %>%
  mutate(ct_subset = ifelse(ct_subset == "test", "beforeSST", NA))
  
full.sst <- bind_rows(spectral.sst, before.sst) %>%
  arrange(organization, sample_id)

## Preparation and export

id.vars <- c("organization", "sample_id", "ct_subset")

rt.mirdata.binded <- full.sst %>%
  mutate_if(is.numeric, round, digits = 5)

write_csv(rt.mirdata.binded, paste0(dir.preprocessed, "RT_STD_allMIRspectra_SST.csv"))

# ## Preprocessings
# 
# ## Baseline offset correction
# 
# rt.mirdata.binded.SGS <- rt.mirdata.binded %>%
#   select(-all_of(id.vars)) %>%
#   as.matrix() %>%
#   prospectr::savitzkyGolay(X = ., m = 0, p = 2, w = 11, delta.wav = 2) %>%
#   bind_cols({rt.mirdata.binded %>%
#       select(all_of(id.vars))}, .)
# 
# rt.mirdata.binded.SGS
# 
# rt.mirdata.binded.baseline <- rt.mirdata.binded.SGS %>%
#   rowwise(all_of(id.vars)) %>%
#   summarise(baseline = min(c_across(everything()))) %>%
#   left_join(rt.mirdata.binded.SGS, by = id.vars) %>%
#   ungroup()
# 
# rt.mirdata.binded.baseline
# 
# rt.mirdata.binded.BC <- rt.mirdata.binded.baseline %>%
#   pivot_longer(-all_of(c(id.vars, "baseline")),
#                names_to = "wavenumber", values_to = "absorbance") %>%
#   mutate(absorbance = absorbance-baseline) %>%
#   pivot_wider(id_cols = all_of(c(id.vars, "baseline")),
#               names_from = "wavenumber", values_from = "absorbance") %>%
#   select(-baseline) %>%
#   mutate_if(is.numeric, round, digits = 5)
# 
# rt.mirdata.binded.BC
# 
# write_csv(rt.mirdata.binded.BC, "inputs/RT_STD_SST_KS50_BOC.csv")
# 
# ## SG First Derivative
# 
# rt.mirdata.binded
# 
# rt.mirdata.binded.1stDer <- rt.mirdata.binded %>%
#   select(-all_of(id.vars)) %>%
#   as.matrix() %>%
#   prospectr::savitzkyGolay(X = ., m = 1, p = 2, w = 11, delta.wav = 2) %>%
#   bind_cols({rt.mirdata.binded %>%
#       select(all_of(id.vars))}, .) %>%
#   mutate_if(is.numeric, round, digits = 8)
# 
# rt.mirdata.binded.1stDer
# 
# write_csv(rt.mirdata.binded.1stDer, "inputs/RT_STD_SST_KS50_SG1stDer.csv")
# 
# ## Standard Normal Variate
# 
# rt.mirdata.binded.SNV <- rt.mirdata.binded %>%
#   select(-all_of(id.vars)) %>%
#   as.matrix() %>%
#   prospectr::savitzkyGolay(X = ., m = 0, p = 2, w = 11, delta.wav = 2) %>%
#   prospectr::standardNormalVariate(X = .) %>%
#   bind_cols({rt.mirdata.binded %>%
#       select(all_of(id.vars))}, .) %>%
#   mutate_if(is.numeric, round, digits = 5)
# 
# rt.mirdata.binded.SNV
# 
# write_csv(rt.mirdata.binded.SNV, "inputs/RT_STD_SST_KS50_SNV.csv")
